:toc:               left
:toc-title:         JMS Connector
:toclevels:         2
:last-update-label!:
:docinfo:
:source-highlighter: coderay
:icons: font


= To Publish Messages with JMS

When publishing via JMS, the two main things to keep in mind are the message to send and its destination.

* Message: The message must follow the JMS structure, so it must include a Body (the Mule message payload, by default), and it can also include a Reply To, Properties and JMSX Properties

* Destination: You can publish to the queue of an individual receiver or to a general topic. Besides defining the type of the destination, you need to name what queue or what topic to publish to.


To send the Mule message payload to a queue:


. Create a Mule application as a project.

. Add and configure an HTTP Listener as a trigger for your flow, and set a Path such as this one:
+
`/publish_message`
+
You can use the default configuration for the Listener connection.

. After the HTTP Listener, add the Publish operation from the JMS connector to your flow.

. Create a JMS configuration for the connection, leaving all of the fields with their default values.

. Set the Destination to the name of the queue you want to publish to and leave the Destination Type as Queue.

. Leave the body of the message as `#[payload]`.


. Deploy, Sync, or Run the app.

. To test the app, open http://url.for.your.app:8081/publish_message from a browser or from an app such as Postman.




== XML Examples


The example below sets the payload as the message, and sends it to a Queue named “myQueue”.

[source,xml,linenums]
----
<jms:publish config-ref="config" destination="#[destination]" destinationType="QUEUE">
   <jms:message>
       <jms:body>#[payload]</jms:body>
   </jms:message>
</jms:publish>
----

Since by default the destinationType is a queue and the message body set as the payload, the same can be expressed through the shorter sample below.

[source,xml,linenums]
----
<jms:publish config-ref="config" destination="#[destination]"/>
----



The example below modifies the payload and publishes it to a Topic. It also adds a property that flags the message as a demo.


<INSERT SCREENSHOT>

[source,xml,linenums]
----
<jms:publish config-ref="config" destination="#[destination]"
        destinationType="TOPIC">
  <jms:message>
    <jms:body>#["modified_" ++ payload]</jms:body>
    <jms:reply-to destination="${repliesQueue}"/>
    <jms:properties>#[{
      'MULE_JMS_DEMO': true
      }]</jms:properties>
    <jms:jmsx-properties jmsxAppID="DemoApp01"/>
  </jms:message>
</jms:publish>
----

















== See Also

* link:/connectors/v/latest/jms-message-structure-about[About the JMS Message Structure]



* link:/connectors/v/latest/jms-about[About JMS Connector]
* link:/connectors/v/latest/jms-technical-ref[JMS Connector Technical Reference]
* link:/connectors/v/latest/jms-global-configuration[JMS Global Configuration]
