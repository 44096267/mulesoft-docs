:toc:               left
:toc-title:         JMS Connector
:toclevels:         2
:last-update-label!:
:docinfo:
:source-highlighter: coderay
:icons: font


== Doing Request-Reply with JMS using PublishConsume

One of the cool new things is the ability to publish a message and wait for a response in a single operation. This operation is called publishConsume.

When sending a message with this operation, all the outgoing message will have a JMSReplyTo header configured. If a reply destination is parameterized in the operation, this will be the one referenced by the header, but in the case where no pre-defined destination is required in order to listen for a response, a temporary destination will be created on the fly, with the only purpose of serving as a replyTo destination where we can listen for a response.

We can start from a configuration like this:

<INSERT SCREENSHOT>

<jms:publish-consume config-ref="config" destination="#[destination]">
   <jms:message>
       <jms:body>#['Please reply']</jms:body>
   </jms:message>
   <jms:publish-configuration priority="6" persistentDelivery="true"/>
   <jms:consume-configuration maximumWait="1000"/>
</jms:publish-consume>

In this configuration we see the four main elements of a publishConsume operation:
Destination
The name of the Queue destination where the Message should be sent. Is important to notice that publishConsume using Topics destination is not supported.

Message
A Message Builder identical to the one found in the publish operation.
In this case we are not specifying a replyTo destination, thus a temporary destination will be created and bounded to the message as the reply target. If a fixed, non-temporal destination is available, all you need to do is to declare its definition in the replyTo element of the message builder.

Publish Configuration
Contains the configuration for the publishing of the outgoing message. Here we make sure it is a persistentDelivery.

Consume Configuration
Contains the configuration for the consumer waiting for a response. In the example we declare that a timeout should occur after one second if a response does not arrive.









== See Also

* link:/connectors/v/latest/jms-about[About JMS Connector]
* link:/connectors/v/latest/jms-technical-ref[JMS Connector Technical Reference]
