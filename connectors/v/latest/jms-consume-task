:toc:               left
:toc-title:         JMS Connector
:toclevels:         2
:last-update-label!:
:docinfo:
:source-highlighter: coderay
:icons: font


= To Consume Messages with JMS

Messages can be consumed from message Queues or from Topics. The Consume Operation and the Listener Operation both allow you to consume messages from Queues and Topics.

The main difference between the JMS Consume and the JMS Listener is that the Listener operation triggers the new execution of a flow every time a message arrives, instead the Consume operation is not a trigger, so it checks for new messages when the flow it's in is triggered by something else.

== Consume messages with a Listener


. Create a Mule application as a project.

. Add a JMS Listener operation to your flow.

. Create a JMS configuration for the connection, leaving all of the fields with their default values.

. Set the Destination to the name of the queue you want to listen from.

. If you want to consume a Topic, change the Consumer Type to Topic.

== Consume messages with a Consume Operation


. Create a Mule application as a project.

. Add an HTTP Listener operation to your flow.

. Create an HTTP Configuration and leave all the default values. Set the HTTP Listener's path to `/getjms`

. Add a JMS Consume operation after the HTTP Listener in your flow.

. Create a JMS configuration for the connection, leaving all of the fields with their default values.

. Set the Destination to the name of the queue you want to listen from.

. If you want to consume a Topic, change the Consumer Type to Topic.


== Send an Acknowledgement

When a message is consumed, you can notify the publisher of the message. This



You can also do this manually

LINK



== Send a Reply Message

When using the Listener Operation, you can send a reply to the publisher of the message. The


The Listener operation allows you to send a reply message. Incoming messag

For this you might want to use the Request and Reply operation instead



In order to produce a response to the destination specified in the JMSReplyTo header of the incoming message, we’ll create a response configuration in our listener.

For this example we’ll be subscribed to a topic with a shared subscription, and when the processing of the flow is completed we’ll reply with a high priority message:

<INSERT SCREENSHOT SHOWING THE RESPONSE GROUP CONFIGURED>

	<jms:listener config-ref="config"  destination="topicListenerDestinationWithReply">
   <jms:consumer-type>
<jms:topic-consumer subscriptionName="demoSub" isShared="true"/>
   </jms:consumer-type>
   <jms:response priority="8" persistentDelivery="true">
       <jms:body>#[{ bridgedData: payload}]</jms:body>
   </jms:response>
</jms:listener>

The response configuration carries all the configuration of the publish parameters and a message builder.












== Durable Subscriptions:



For example, an application that needs to receive all the messages published on a topic, including the ones published when there is no consumer associated with it can flag the subscription as a durable subscription.
A durable subscription is identified by a name specified by the subscriptionName, which becomes mandatory for this kind of subscription.

Shared Subscriptions (JMS 2.0 Only):
	A shared subscription is used by an application that needs to be able to share the work of receiving messages from a topic amongst multiple consumers, by assuring that each message from the subscription will be delivered to only one of the consumers on that subscription.
A shared subscription is identified by a name specified by the subscriptionName, which becomes mandatory for this kind of subscription.

Shared and Durable subscriptions can be combined, in which case both will be bounded to the same subscriptionName.






== XML Example



Both the Consume and Listener operations consume from Queues by default, so to consume a queue the only required field is Destination. The example below shows the simplest possible implementation of a JMS Listener.

[source,xml,linenums]
----
<jms:listener config-ref="config" destination="${destinationQueueName}"/>
----

The expression above leaves several fields undefined and set as their default values. The expression below sets these fields explicitly:

[source,xml,linenums]
----
<jms:listener config-ref="config" destination="${incomingDestination}"
ackMode="NONE" numberOfConsumers="4">
   <jms:consumer-type>
       <jms:queue-consumer/>
   </jms:consumer-type>
</jms:listener>
----

The example above tries to get the first available Message from a Queue, waiting for up to 10 sec (the default for the `maximumWait` parameter from the configuration element) for a message to arrive. By default, `ackMode` is NONE, so in this example, once the operation returns a result, the message will be already acknowledged unless a transaction is taking place.






To consume a message from a Topic (with either the Consumer or Listener operation), you must add a `consumer-type` structure with a `topic-consumer` child element in it:

[source,xml,linenums]
----
<jms:listener config-ref="config" destination="${incomingDestination}">
	<jms:consumer-type>
		<jms:topic-consumer subscriptionName="subName"/>
	</jms:consumer-type>
</jms:listener>
----


consumerType, other important parameters for configuring the operation are:

Destination
The name of the destination from which the messages will be consumed
Maximum Wait
Sets the maximum time to wait for a message to arrive before failing with a TIMEOUT error.
AckMode
NONE
Message is acknowledged right before the consume operation produces a result
MANUAL
The user has to manually ACK the message (see ack operation)


And this is what each parameter means:
Destination: The name of the destination from which the messages will be consumed
AckMode: Defines when the ACK will be performed, for the listener this means

NONE
ACK occurs before the Message is dispatched to the Flow
AUTO
ACK occurs when the processing flow is completed without errors
DUPS_OK
Similar to AUTO but duplicated ACK are allowed
MANUAL
The user has to manually ACK the message (see ack operation)


Number of Consumers:
Defines how many consumers will be waiting for messages from the Queue at the same time. This is critical for tuning the performance of your message source. The more consumers you create in parallel for the same connection, the more throughput you’ll get for dispatching events to your mule flow.






== See Also

* link:/connectors/v/latest/jms-about[About JMS Connector]
* link:/connectors/v/latest/jms-technical-ref[JMS Connector Technical Reference]
